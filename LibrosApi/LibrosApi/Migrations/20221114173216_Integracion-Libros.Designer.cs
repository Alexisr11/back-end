// <auto-generated />
using System;
using LibrosApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace LibrosApi.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    [Migration("20221114173216_Integracion-Libros")]
    partial class IntegracionLibros
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibrosApi.Entidades.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechadeNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("LibrosApi.Entidades.Categorias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("LibrosApi.Entidades.Librerias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<Point>("Ubicacion")
                        .HasColumnType("geography");

                    b.HasKey("Id");

                    b.ToTable("Librerias");
                });

            modelBuilder.Entity("LibrosApi.Entidades.Libro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookTrailer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnLibrerias")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaDeLanzamiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resumen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("Libro");
                });

            modelBuilder.Entity("LibrosApi.Entidades.LibrosAutores", b =>
                {
                    b.Property<int>("LibroId")
                        .HasColumnType("int");

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Personaje")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("LibroId", "AutorId");

                    b.HasIndex("AutorId");

                    b.ToTable("LibrosAutores");
                });

            modelBuilder.Entity("LibrosApi.Entidades.LibrosCategorias", b =>
                {
                    b.Property<int>("LibroId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoriasId")
                        .HasColumnType("int");

                    b.HasKey("LibroId", "CategoriaId");

                    b.HasIndex("CategoriasId");

                    b.ToTable("LibrosCategorias");
                });

            modelBuilder.Entity("LibrosApi.Entidades.LibrosLibrerias", b =>
                {
                    b.Property<int>("LibroId")
                        .HasColumnType("int");

                    b.Property<int>("LibreriaId")
                        .HasColumnType("int");

                    b.Property<int?>("LibreriasId")
                        .HasColumnType("int");

                    b.HasKey("LibroId", "LibreriaId");

                    b.HasIndex("LibreriasId");

                    b.ToTable("LibrosLibrerias");
                });

            modelBuilder.Entity("LibrosApi.Entidades.LibrosAutores", b =>
                {
                    b.HasOne("LibrosApi.Entidades.Autor", "Autor")
                        .WithMany("LibrosAutores")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrosApi.Entidades.Libro", "Libro")
                        .WithMany("LibrosAutores")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibrosApi.Entidades.LibrosCategorias", b =>
                {
                    b.HasOne("LibrosApi.Entidades.Categorias", "Categorias")
                        .WithMany("LibrosCategorias")
                        .HasForeignKey("CategoriasId");

                    b.HasOne("LibrosApi.Entidades.Libro", "Libro")
                        .WithMany("LibrosCategorias")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibrosApi.Entidades.LibrosLibrerias", b =>
                {
                    b.HasOne("LibrosApi.Entidades.Librerias", "Librerias")
                        .WithMany("LibrosLibrerias")
                        .HasForeignKey("LibreriasId");

                    b.HasOne("LibrosApi.Entidades.Libro", "Libro")
                        .WithMany("LibrosLibrerias")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
